package phoenixcenter.metaproteomics;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Mascot2XMLEnhancer {

    private final String mascot2XMLLocation = GlobalConfig.getValue("Mascot2XML");

    public void genLibraryWithDecoy(String targetLibrary,
                                    String decoyPrefix,
                                    String targetDecoyLibrary) throws IOException {
        BufferedReader br = Files.newBufferedReader(Paths.get(targetLibrary), StandardCharsets.UTF_8);
        BufferedWriter bw = Files.newBufferedWriter(Paths.get(targetDecoyLibrary), StandardCharsets.UTF_8,
                StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
        String line;
        String anno = null;
        StringBuilder sequence = null;
        while ((line = br.readLine()) != null) {
            if (line.startsWith(">")) {
                if (sequence != null) {
                    // write target
                    bw.write(">" + anno + System.lineSeparator());
                    bw.write(sequence.toString() + System.lineSeparator());
                    // write decoy
                    bw.write(">" + decoyPrefix + anno + System.lineSeparator());
                    bw.write(sequence.reverse().toString() + System.lineSeparator());
                }
                anno = line.substring(1);
                sequence = new StringBuilder();
            } else {
                sequence.append(line);
            }
        }
        // the last
        if (sequence != null) {
            // write target
            bw.write(">" + anno + System.lineSeparator());
            bw.write(sequence.toString() + System.lineSeparator());
            // write decoy
            bw.write(">" + decoyPrefix + anno + System.lineSeparator());
            bw.write(sequence.reverse().toString() + System.lineSeparator());
        }
        br.close();
        bw.close();
    }

    public void convertManualDecoyMode(String datFile,
                                       String enzyme,
                                       String targetDecoyLibrary,
                                       String pepxmlFile) throws IOException {
        /** convert **/
        Map<String, String> params = new HashMap<>();
        params.put("-D", targetDecoyLibrary);
        params.put("-E", enzyme);
        Path resultPath = convert(Paths.get(datFile), params);
        Files.move(resultPath, Paths.get(pepxmlFile), StandardCopyOption.REPLACE_EXISTING);
    }

    /**
     * Generate pepxml file from dat file(auto decoy mode).
     * <p>
     * Note: the library with decoy need to be generated.
     * Otherwise, illegal protein ids(like xxx_UNMAPPED) will generate in PeptideProphet
     *
     * @param datFile
     * @param decoyPrefix
     * @param targetDecoyLibrary
     * @param pepxmlFile
     * @throws IOException
     */
    public void convertAutoDecoyMode(String datFile,
                                     String decoyPrefix,
                                     String enzyme,
                                     String targetDecoyLibrary,
                                     String pepxmlFile) throws IOException {
        /** convert **/
        Map<String, String> params = new HashMap<>();
        params.put("-D", targetDecoyLibrary);
        params.put("-E", enzyme);
        Path resultPath = parseAutoDecoyModelDat(Paths.get(datFile), params, decoyPrefix);
        Files.move(resultPath, Paths.get(pepxmlFile), StandardCopyOption.REPLACE_EXISTING);
    }

    /**
     * Parse dat file generated by "auto decoy" model. Split raw dat file as target and decoy
     * and then run "Mascot2XML". Finally, combine two pepxml by choose the best psmCount.
     * The highest ions score will be selected when a spectrum match target and decoy.
     *
     * @param datPath
     * @param params
     * @param decoyPrefix
     * @return
     * @throws IOException
     */
    private Path parseAutoDecoyModelDat(Path datPath,
                                        Map<String, String> params,
                                        String decoyPrefix) throws IOException {
        /** split dat file as target and decoy dat files **/
        Path parentPath = datPath.getParent();
        Path targetPath = Files.createTempFile(parentPath, "target", ".dat");
        Path decoyPath = Files.createTempFile(parentPath, "decoy", ".dat");
        BufferedWriter targetBW = Files.newBufferedWriter(targetPath, StandardCharsets.UTF_8);
        BufferedWriter decoyBW = Files.newBufferedWriter(decoyPath, StandardCharsets.UTF_8);
        boolean commonSection = true;
        BufferedWriter currentBW = null;
        BufferedReader br = Files.newBufferedReader(datPath, StandardCharsets.UTF_8);
        String line;
        while ((line = br.readLine()) != null) {
            // judge whether the section is common
            if (line.startsWith("Content-Type: application/x-Mascot;")) {
                switch (line) {
                    case "Content-Type: application/x-Mascot; name=\"summary\"":
                    case "Content-Type: application/x-Mascot; name=\"peptides\"":
                        commonSection = false;
                        currentBW = targetBW;
                        break;
                    case "Content-Type: application/x-Mascot; name=\"decoy_summary\"":
                        commonSection = false;
                        line = "Content-Type: application/x-Mascot; name=\"summary\"";
                        currentBW = decoyBW;
                        break;
                    case "Content-Type: application/x-Mascot; name=\"decoy_peptides\"":
                        commonSection = false;
                        line = "Content-Type: application/x-Mascot; name=\"peptides\"";
                        currentBW = decoyBW;
                        break;
                    default:
                        commonSection = true;
                }
                if (line.equals("Content-Type: application/x-Mascot; name=\"index\"")) {
                    break;
                }
            }
            // write
            if (commonSection) {
                targetBW.write(line + System.lineSeparator());
                decoyBW.write(line + System.lineSeparator());
            } else {
                currentBW.write(line + System.lineSeparator());
            }
        }
        br.close();
        targetBW.close();
        decoyBW.close();

        /** run Mascot2XML **/
        // target
        Path targetPepXML = convert(targetPath, params);
        // decoy
        Path decoyPepXML = convert(decoyPath, params);

        /** combine target and decoy: replace target with better decoy psmCount **/
        String datFileName = datPath.getFileName().toString();
        datFileName = datFileName.substring(0, datFileName.lastIndexOf("."));
        Path resultPath = parentPath.resolve(datFileName + ".pep.xml");
        String targetFileName = targetPepXML.getFileName().toString();
        targetFileName = targetFileName.substring(0, targetFileName.lastIndexOf(".pep.xml"));
        String decoyFileName = decoyPepXML.getFileName().toString();
        decoyFileName = decoyFileName.substring(0, decoyFileName.indexOf(".pep.xml"));

        BufferedReader targetBR = Files.newBufferedReader(targetPepXML, StandardCharsets.UTF_8);
        BufferedReader decoyBR = Files.newBufferedReader(decoyPepXML, StandardCharsets.UTF_8);
        BufferedWriter resultBW = Files.newBufferedWriter(resultPath, StandardCharsets.UTF_8);
        Map<String, Integer> targetQid2Idx = new HashMap<>();
        Map<String, Integer> decoyQid2Idx = new HashMap<>();
        List<String[]> targetQueryList = new ArrayList<>();
        List<String[]> decoyQueryList = new ArrayList<>();
        while ((line = targetBR.readLine()) != null) {
            line = line.trim();
            if (line.startsWith("<spectrum_query")) {
                line = line.replace(targetFileName, datFileName);
                parseSpectrumQuery(targetBR, line, targetQid2Idx, decoyQid2Idx,
                        targetQueryList, decoyQueryList, resultBW, null);
                while ((line = decoyBR.readLine()) != null) {
                    line = line.trim();
                    if (line.startsWith("<spectrum_query")) {
                        line = line.replace(decoyFileName, datFileName);
                        parseSpectrumQuery(decoyBR, line, decoyQid2Idx, targetQid2Idx,
                                decoyQueryList, targetQueryList, resultBW, decoyPrefix);
                        break;
                    }
                }
            } else {
                if (line.startsWith("<msms_pipeline_analysis")) {
                    line = line.replace(targetPepXML.toString(), resultPath.toString());
                } else if (line.startsWith("<msms_run_summary")) {
                    line = line.replace(targetPath.getParent().resolve(targetFileName).toString(),
                            datPath.getParent().resolve(datFileName).toString());
                } else if (line.startsWith("<search_summary")) {
                    line = line.replace(targetPath.getParent().resolve(targetFileName).toString(),
                            datPath.getParent().resolve(datFileName).toString());
                } else if (line.startsWith("</msms_run_summary>")) {
                    for (String[] entry : targetQueryList) {
                        resultBW.write(entry[1] + System.lineSeparator());
                    }
                    for (String[] entry : decoyQueryList) {
                        resultBW.write(entry[1] + System.lineSeparator());
                    }
                }
                resultBW.write(line + System.lineSeparator());
            }
        }
        targetBR.close();
        decoyBR.close();
        resultBW.close();
        // delete temporary file
        Files.delete(targetPath);
        Files.delete(decoyPath);
        Files.delete(targetPepXML);
        Files.delete(decoyPepXML);
        return resultPath;
    }

    /**
     * Parse content in tag <spectrum_query><spectrum_query/>
     *
     * @param br
     * @param line
     * @param mainQid2Idx
     * @param secondQid2Idx
     * @param mainQueryList
     * @param secondQueryList
     * @param bw
     * @param decoyPrefix
     * @throws IOException
     */
    private void parseSpectrumQuery(BufferedReader br, String line,
                                    Map<String, Integer> mainQid2Idx,
                                    Map<String, Integer> secondQid2Idx,
                                    List<String[]> mainQueryList,
                                    List<String[]> secondQueryList,
                                    BufferedWriter bw,
                                    String decoyPrefix) throws IOException {
        int idx = -1;
        // obtain query id
        int dotCount = 0, start = -1, end = -1;
        for (int i = 0; i < line.length(); i++) {
            if (line.charAt(i) == '.') {
                if (dotCount == 0) {
                    start = i + 1;
                } else {
                    end = i;
                }
                if (++dotCount == 3) {
                    break;
                }
            }
        }
        String qid = line.substring(start, end);
        if (secondQid2Idx.containsKey(qid)) {
            idx = secondQid2Idx.get(qid);
        }
        StringBuilder sb = new StringBuilder(line);
        while (!(line = br.readLine().trim()).equals("</spectrum_query>")) {
            sb.append(line + System.lineSeparator());
        }
        sb.append(line);
        // 1 - qid, 2 - query content
        // it is a bug of Mascot2XML: if massdiff = -0.0000 in dat file, the value will be recorded as +-0.0000 in pepxml
        String queryStr = sb.toString().replace("massdiff=\"+-", "massdiff=\"+");
        mainQueryList.add(new String[]{qid, decoyPrefix == null
                ? queryStr
                : queryStr.replace("protein=\"", "protein=\"" + decoyPrefix)
        });
        if (idx == -1) {
            // did not find same query
            mainQid2Idx.put(qid, mainQueryList.size() - 1);
        } else {
            int lastIdx = mainQueryList.size() - 1;
            for (int i = 0; i < lastIdx; i++) {
                bw.write(mainQueryList.get(i)[1] + System.lineSeparator());
            }
            String equalQuery1 = mainQueryList.get(lastIdx)[1];
            mainQid2Idx.clear();
            mainQueryList.clear();

            for (int i = 0; i < idx; i++) {
                bw.write(secondQueryList.get(i)[1] + System.lineSeparator());
            }
            String equalQuery2 = secondQueryList.get(idx)[1];
            secondQid2Idx.clear();
            for (int i = 0; i <= idx; i++) {
                secondQueryList.remove(0);
            }
            for (int i = 0; i < secondQueryList.size(); i++) {
                secondQid2Idx.put(secondQueryList.get(i)[0], i);
            }
            Function<String, Double> captureIonscore = (String query) -> {
                int fromIdx = query.indexOf("ionscore\"");
                fromIdx = query.indexOf("=", fromIdx) + 2;
                int endIdx = query.indexOf("\"", fromIdx);
                return new Double(query.substring(fromIdx, endIdx));
            };
            double ionscore1 = captureIonscore.apply(equalQuery1);
            double ionscore2 = captureIonscore.apply(equalQuery2);
            if (ionscore1 >= ionscore2) {
                bw.write(equalQuery1 + System.lineSeparator());
            } else {
                bw.write(equalQuery2 + System.lineSeparator());
            }
        }
    }

    /**
     * Run Mascot2XML to convert dat file. The result pepxml is in the same directory as the dat file
     *
     * @param datPath
     * @param params
     * @return
     * @throws IOException
     * @throws InterruptedException
     */
    private Path convert(Path datPath,
                         Map<String, String> params) {
        params.put("-notgz", null);
        params.put("-nodta", null);
        String command = mascot2XMLLocation + " " + datPath.toString() + " "
                + params.entrySet().stream()
                .map(e -> e.getKey() + (e.getValue() == null ? "" : e.getValue()))
                .collect(Collectors.joining(" "));
        CommandExecutor.exec(command);
        String datFileName = datPath.getFileName().toString();
        datFileName = datFileName.substring(0, datFileName.lastIndexOf("."));
        return datPath.getParent().resolve(datFileName + ".pep.xml");
    }
}
